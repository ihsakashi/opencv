cmake_minimum_required(VERSION 3.12)

project(opencv_objc)

# Enable C++11
set (CMAKE_CXX_STANDARD 11)
set (CMAKE_CXX_STANDARD_REQUIRED TRUE)

set (OBJC_ARC_COMPILE_FLAGS "-fobjc-arc -fobjc-weak")
set (CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${OBJC_ARC_COMPILE_FLAGS}")

# grab the files
file(GLOB_RECURSE objc_sources "objc/*\.h" "objc/*\.m" "objc/*\.mm" "objc/*\.swift")

add_library(opencv_objc STATIC ${objc_sources})

set_target_properties(opencv_objc PROPERTIES LINKER_LANGUAGE CXX)

target_include_directories(opencv_objc PRIVATE "include")
foreach(m ${MODULES})
  target_include_directories(opencv_objc PRIVATE "${OpenCV_BINARY_DIR}/modules/objc/gen/objc/${m}")
endforeach()

enable_language(Swift)

# Additional target properties
set_target_properties(opencv_objc PROPERTIES
    OUTPUT_NAME "opencv_objc"
    XCODE_ATTRIBUTE_SWIFT_OBJC_BRIDGING_HEADER "${OpenCV_BINARY_DIR}/modules/objc/gen/objc/OpenCV-ObjC-Bridge.h"
    ARCHIVE_OUTPUT_DIRECTORY "${LIBRARY_OUTPUT_PATH}"
    DEFINE_SYMBOL CVAPI_EXPORTS
    )

if(NOT XCODE_VERSION VERSION_LESS 10.2)
  set_target_properties(opencv_objc PROPERTIES
      XCODE_ATTRIBUTE_SWIFT_VERSION 5.0
      )
elseif(NOT XCODE_VERSION VERSION_LESS 9.0)
  set_target_properties(${the_module} PROPERTIES
      XCODE_ATTRIBUTE_SWIFT_VERSION 4.0
      )
elseif(NOT XCODE_VERSION VERSION_LESS 8.0)
  set_target_properties(${the_module} PROPERTIES
      XCODE_ATTRIBUTE_SWIFT_VERSION 3.0
      )
endif()
